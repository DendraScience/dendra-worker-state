{
    "source_defaults":
    {
        "queue_group": "prep",
        "sub_options":
        {
            "ack_wait": 60000,
            "durable_name": "20220614"
        }
    },
    "sources":
    [
        {
            "description": "TNC: Prepare patched payload for writing to Influx",
            "error_subject": "tnc.prep.v1.err.patch",
            "preprocessing_expr":
            [
                "($org := context.org_slug ~> $safeName;",
                "$station := context.station ~> $safeName;",
                "$table := context.table ~> $safeName;",
                "$tags := ['org' & '$' & $org, 'station' & '$' & $station, 'table' & '$' & $table];",
                "$time := payload.time;",
                "$params := {'tags': $tags, 'time': $time};",
                "$options := {'database': 'station_' & $station, 'precision': 'ms'};",
                "$fields := payload ~> $deleteNulls ~> $deleteKeys(['time']);",
                "$points := [{'fields': $fields, 'measurement': 'source_' & $table, 'time': $time}];",
                "$payload := {'options': $options, 'points': $points};",
                "$ ~> |$|{'params': $params, 'payload': $payload}|;)"
            ],
            "pub_to_subject": "tnc.prep.v1.out",
            "sub_to_subject": "tnc.patch.v1.out"
        },
        {
            "description": "TNC: Prepare webhook data for writing to Influx",
            "error_subject": "tnc.prep.v1.err.webhook",
            "preprocessing_expr":
            [
                "($app := [end_device_ids.application_ids.application_id, 'unknown'][0] ~> $safeName;",
                "$device := [end_device_ids.device_id, 'unknown'][0] ~> $safeName;",
                "$table := [uplink_message.decoded_payload.parsed.table, 'unknown'][0] ~> $safeName;",
                "$tags := ['app' & '$' & $app, 'device' & '$' & $device, 'table' & '$' & $table];",
                "$received_at := uplink_message.received_at ~> $toMillis;",
                "$time := $floor($received_at / 300000) * 300000;",
                "$options := {'database': 'device_' & $device, 'precision': 'ms'};",
                "$fields := [uplink_message.decoded_payload.parsed.fields, {}][0] ~> $deleteNulls ~> $deleteKeys(['time']);",
                "$fields := $merge([$fields, {'logger_time': uplink_message.decoded_payload.parsed.time, 'uplink_message_received_at': $received_at}]);",
                "$points := [{'fields': $fields, 'measurement': 'source_' & $table, 'time': $time}];",
                "$context := {'app': $app, 'device': $device, 'table': $table};",
                "$skip := $fields ~> $keys ~> $count > 0 ? [$time, true][0] : true;",
                "$params := {'skip': $skip, 'tags': $tags, 'time': $time};",
                "$payload := {'options': $options, 'points': $points};",
                "{'context': $context, 'params': $params, 'payload': $payload};)"
            ],
            "pub_to_subject": "tnc.prep.v1.out",
            "sub_to_subject": "tnc.import.v1.out.webhook"
        },
        {
            "description": "TNC: Prepare Swarm webhook data for writing to Influx",
            "error_subject": "tnc.prep.v1.err.webhook.swarm",
            "preprocessing_expr":
            [
                "($root := payload ? payload : $;",
                "$app := [$string($root.userApplicationId), 'unknown'][0] ~> $safeName;",
                "$device := [$string($root.deviceId), 'unknown'][0] ~> $safeName;",
                "$parts := $root.data ~> $base64decode ~> $split(',');",
                "$messageType := $parts[3];",
                "$table := 'msg_type_' & [$messageType, 'unknown'][0] ~> $safeName;",
                "$tags := ['app' & '$' & $app, 'device' & '$' & $device, 'table' & '$' & $table];",
                "$received_at := $root.hiveRxTime & 'Z' ~> $toMillis;",
                "$time := $number($parts[1]) * 1000;",
                "$options := {'database': 'swarm_device_' & $device, 'precision': 'ms'};",
                "$sdi12Parse := function($line) {",
                "$match($line, /[-+][0-9.]+/) ~> $map(function($v) { $v.match })",
                "};",
                "$channels := $parts[[4,6,8,10,12,14,16,18,20]];",
                "$lines := $parts[[5,7,9,11,13,15,17,19,21]];",
                "$fields := ($channels ? $channels : []) ~> $reduce(function($f, $ch, $i) {(",
                "$merge([",
                "$f,",
                "$lines[$i] ~> $sdi12Parse ~> $reduce(function($cf, $v, $j) {(",
                "$merge([$cf, {'ch_' & $ch & '_param_' & $formatNumber($j, '00'): $number($replace($v, '+', ''))}])",
                ")}, {})",
                "]);",
                ")}, {",
                "'bat_vol': $number($parts[2]),",
                "'messages_since_restart': $number($parts[0])",
                "});",
                "$points := [{'fields': $fields, 'measurement': 'source_' & $table, 'time': $time}];",
                "$context := {'app': $app, 'device': $device, 'table': $table};",
                "$skip := $fields ~> $keys ~> $count > 0 ? [$time, true][0] : true;",
                "$params := {'skip': $skip, 'tags': $tags, 'time': $time};",
                "$payload := {'options': $options, 'points': $points};",
                "{'context': $context, 'params': $params, 'payload': $payload};)"
            ],
            "pub_to_subject": "tnc.prep.v1.out",
            "sub_to_subject": "tnc.import.v1.out.webhook.swarm"
        },
        {
            "description": "TNC: Prepare Things webhook data for writing to Influx",
            "error_subject": "tnc.prep.v1.err.webhook.things",
            "preprocessing_expr":
            [
                "($app := [end_device_ids.application_ids.application_id, 'unknown'][0] ~> $safeName;",
                "$device := [end_device_ids.device_id, 'unknown'][0] ~> $safeName;",
                "$tags := ['app' & '$' & $app, 'device' & '$' & $device];",
                "$received_at := uplink_message.received_at ~> $toMillis;",
                "$time := $floor($received_at / 300000) * 300000;",
                "$options := {'database': 'things_app_' & $app, 'precision': 'ms'};",
                "$fields := [uplink_message.decoded_payload, {}][0] ~> $deleteNulls ~> $deleteKeys(['time']);",
                "$fields := $merge([$fields, {'logger_time': uplink_message.decoded_payload.parsed.time, 'uplink_message_received_at': $received_at}]);",
                "$points := [{'fields': $fields, 'measurement': 'device_' & $device, 'time': $time}];",
                "$context := {'app': $app, 'device': $device};",
                "$skip := $fields ~> $keys ~> $count > 0 ? [$time, true][0] : true;",
                "$params := {'skip': $skip, 'tags': $tags, 'time': $time};",
                "$payload := {'options': $options, 'points': $points};",
                "{'context': $context, 'params': $params, 'payload': $payload};)"
            ],
            "pub_to_subject": "tnc.prep.v1.out",
            "sub_to_subject": "tnc.import.v1.out.webhook.things"
        }
    ],
    "static_rules":
    [
        {
            "begins_at": "1500-01-01T00:00:00.000Z",
            "definition":
            {
                "transform_expr":
                []
            },
            "ends_before": "1600-01-01T00:00:00.000Z",
            "tags":
            []
        }
    ]
}